// <auto-generated />
using System;
using EPlast.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EPlast.DataAccess.Migrations
{
    [DbContext(typeof(EPlastDBContext))]
    [Migration("20200317232913_Drop_AnnualReportStatuses")]
    partial class Drop_AnnualReportStatuses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EPlast.DataAccess.Entities.AdminType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminTypeName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("AdminTypes");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.AnnualReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("ContributionFunds");

                    b.Property<DateTime>("Date");

                    b.Property<string>("ImprovementNeeds");

                    b.Property<string>("ListProperty");

                    b.Property<int>("NumberOfAdministrators");

                    b.Property<int>("NumberOfBeneficiaries");

                    b.Property<int>("NumberOfClubs");

                    b.Property<int>("NumberOfHonoraryMembers");

                    b.Property<int>("NumberOfIndependentGroups");

                    b.Property<int>("NumberOfIndependentRiy");

                    b.Property<int>("NumberOfPlastpryiatMembers");

                    b.Property<int>("NumberOfSeatsInCity");

                    b.Property<int>("NumberOfSeatsPtashat");

                    b.Property<int>("NumberOfTeacherAdministrators");

                    b.Property<int>("NumberOfTeachers");

                    b.Property<int>("PlastSalary");

                    b.Property<int>("PublicFunds");

                    b.Property<int>("SponsorshipFunds");

                    b.Property<int>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("AnnualReports");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Approver", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Approvers");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityURL")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("OfficeNumber")
                        .HasMaxLength(10);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16);

                    b.Property<string>("PostIndex")
                        .HasMaxLength(7);

                    b.Property<int?>("RegionID");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityAdministration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminTypeId");

                    b.Property<int>("CityId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("AdminTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("CityAdministrations");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityDocumentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("CityDocumentTypes");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityDocuments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityDocumentTypeID");

                    b.Property<int?>("CityID");

                    b.Property<string>("DocumentURL")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime?>("SubmitDate");

                    b.HasKey("ID");

                    b.HasIndex("CityDocumentTypeID");

                    b.HasIndex("CityID");

                    b.ToTable("CityDocuments");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityLegalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("CityLegalStatusTypeId");

                    b.Property<DateTime?>("DateFinish");

                    b.Property<DateTime?>("DateStart");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CityLegalStatusTypeId");

                    b.ToTable("CityLegalStatuses");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityLegalStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CityLegalStatusTypes");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityMembers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("CityMembers");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Club", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ClubURL");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Logo");

                    b.HasKey("ID");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.ClubAdministration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminTypeID");

                    b.Property<int?>("ClubID");

                    b.Property<int>("ClubMembersID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ID");

                    b.HasIndex("AdminTypeID");

                    b.HasIndex("ClubID");

                    b.HasIndex("ClubMembersID");

                    b.ToTable("ClubAdministrations");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.ClubMembers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubID");

                    b.Property<bool>("IsApproved");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("ClubID");

                    b.HasIndex("UserId");

                    b.ToTable("ClubMembers");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.ConfirmedUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApproverID");

                    b.Property<DateTime>("ConfirmDate");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("ApproverID")
                        .IsUnique()
                        .HasFilter("[ApproverID] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmedUsers");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Decesion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("DecesionStatusID");

                    b.Property<int>("DecesionTargetID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationID");

                    b.HasKey("ID");

                    b.HasIndex("DecesionStatusID");

                    b.HasIndex("DecesionTargetID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Decesions");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.DecesionStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DecesionStatusName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("DecesionStatuses");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.DecesionTarget", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TargetName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("DecesionTargets");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Degree", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.DocumentTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentFIleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Education", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DegreeID");

                    b.Property<string>("PlaceOfStudy")
                        .HasMaxLength(30);

                    b.Property<string>("Speciality")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.HasIndex("DegreeID");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("EventCategoryID");

                    b.Property<DateTime>("EventDateEnd");

                    b.Property<DateTime>("EventDateStart");

                    b.Property<string>("EventName")
                        .IsRequired();

                    b.Property<int>("EventStatusID");

                    b.Property<string>("Eventlocation")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EventCategoryID");

                    b.HasIndex("EventStatusID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.EventAdmin", b =>
                {
                    b.Property<int>("EventID");

                    b.Property<string>("UserID");

                    b.HasKey("EventID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("EventAdmin");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.EventCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventCategoryName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.EventGallary", b =>
                {
                    b.Property<int>("EventID");

                    b.Property<int>("GallaryID");

                    b.HasKey("EventID", "GallaryID");

                    b.HasIndex("GallaryID");

                    b.ToTable("EventGallarys");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.EventStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventStatusName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("EventStatuses");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Gallary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GalaryFileName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Gallarys");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.MembersStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnualReportId");

                    b.Property<int>("NumberOfNovatstva");

                    b.Property<int>("NumberOfPtashata");

                    b.Property<int>("NumberOfSeigneurMembers");

                    b.Property<int>("NumberOfSeigneurSupporters");

                    b.Property<int>("NumberOfSeniorPlastynMembers");

                    b.Property<int>("NumberOfSeniorPlastynSupporters");

                    b.Property<int>("NumberOfUnatstvaMembers");

                    b.Property<int>("NumberOfUnatstvaNoname");

                    b.Property<int>("NumberOfUnatstvaProspectors");

                    b.Property<int>("NumberOfUnatstvaSkobVirlyts");

                    b.Property<int>("NumberOfUnatstvaSupporters");

                    b.HasKey("Id");

                    b.HasIndex("AnnualReportId")
                        .IsUnique();

                    b.ToTable("MembersStatistics");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Nationality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Participant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("ParticipantStatusId");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.ParticipantStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEventStatusName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("ParticipantStatuses");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Region", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.RegionAdministration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminTypeID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("RegionID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("AdminTypeID");

                    b.HasIndex("RegionID");

                    b.HasIndex("UserId");

                    b.ToTable("RegionAdministrations");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Religion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.SubEventCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventCategoryID");

                    b.Property<string>("SubEventCategoryName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EventCategoryID");

                    b.ToTable("SubEventCategories");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.UnconfirmedCityMember", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityID");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("UnconfirmedCityMember");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.UserPlastDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateFinish");

                    b.Property<DateTime>("DateStart");

                    b.Property<string>("UserId");

                    b.Property<int>("UserPlastDegreeTypeId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPlastDegreeTypeId");

                    b.ToTable("UserPlastDegrees");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.UserPlastDegreeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UserPlastDegreeTypes");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.UserProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateTime");

                    b.Property<int?>("EducationID");

                    b.Property<int?>("GenderID");

                    b.Property<int?>("NationalityID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10);

                    b.Property<int?>("ReligionID");

                    b.Property<string>("UserID");

                    b.Property<int?>("WorkID");

                    b.HasKey("ID");

                    b.HasIndex("EducationID");

                    b.HasIndex("GenderID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("ReligionID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.HasIndex("WorkID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Work", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlaceOfwork")
                        .HasMaxLength(20);

                    b.Property<string>("Position")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FatherName")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ImagePath");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("RegistredOn");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.AnnualReport", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.City", "City")
                        .WithMany("AnnualReports")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("AnnualReports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Approver", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("Approvers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.City", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionID");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityAdministration", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.AdminType", "AdminType")
                        .WithMany("CityAdministration")
                        .HasForeignKey("AdminTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.City", "City")
                        .WithMany("CityAdministration")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("CityAdministrations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityDocuments", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.CityDocumentType", "CityDocumentType")
                        .WithMany("CityDocuments")
                        .HasForeignKey("CityDocumentTypeID");

                    b.HasOne("EPlast.DataAccess.Entities.City", "City")
                        .WithMany("CityDocuments")
                        .HasForeignKey("CityID");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityLegalStatus", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.City", "City")
                        .WithMany("CityLegalStatuses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.CityLegalStatusType", "LegalStatus")
                        .WithMany("CityLegalStatuses")
                        .HasForeignKey("CityLegalStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.CityMembers", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.City", "City")
                        .WithMany("CityMembers")
                        .HasForeignKey("CityID");

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("CityMembers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.ClubAdministration", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.AdminType", "AdminType")
                        .WithMany("ClubAdministration")
                        .HasForeignKey("AdminTypeID");

                    b.HasOne("EPlast.DataAccess.Entities.Club", "Club")
                        .WithMany("ClubAdministration")
                        .HasForeignKey("ClubID");

                    b.HasOne("EPlast.DataAccess.Entities.ClubMembers", "ClubMembers")
                        .WithMany("ClubAdministration")
                        .HasForeignKey("ClubMembersID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.ClubMembers", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.Club", "Club")
                        .WithMany("ClubMembers")
                        .HasForeignKey("ClubID");

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("ClubMembers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.ConfirmedUser", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.Approver", "Approver")
                        .WithOne("ConfirmedUser")
                        .HasForeignKey("EPlast.DataAccess.Entities.ConfirmedUser", "ApproverID");

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("ConfirmedUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Decesion", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.DecesionStatus", "DecesionStatus")
                        .WithMany()
                        .HasForeignKey("DecesionStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.DecesionTarget", "DecesionTarget")
                        .WithMany()
                        .HasForeignKey("DecesionTargetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Education", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.Degree", "Degree")
                        .WithMany("Educations")
                        .HasForeignKey("DegreeID");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Event", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.EventStatus", "EventStatus")
                        .WithMany("Events")
                        .HasForeignKey("EventStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.EventAdmin", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.Event", "Event")
                        .WithMany("EventAdmins")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.EventGallary", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.Event", "Event")
                        .WithMany("EventGallarys")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.Gallary", "Gallary")
                        .WithMany("Events")
                        .HasForeignKey("GallaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.MembersStatistic", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.AnnualReport", "AnnualReport")
                        .WithOne("MembersStatistic")
                        .HasForeignKey("EPlast.DataAccess.Entities.MembersStatistic", "AnnualReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.Participant", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.ParticipantStatus", "ParticipantStatus")
                        .WithMany("Participants")
                        .HasForeignKey("ParticipantStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.RegionAdministration", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.AdminType", "AdminType")
                        .WithMany("RegionAdministration")
                        .HasForeignKey("AdminTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EPlast.DataAccess.Entities.Region", "Region")
                        .WithMany("RegionAdministration")
                        .HasForeignKey("RegionID");

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("RegionAdministrations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.SubEventCategory", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.EventCategory", "EventCategory")
                        .WithMany("SubEventCategories")
                        .HasForeignKey("EventCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.UnconfirmedCityMember", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.City", "City")
                        .WithMany("UnconfirmedCityMember")
                        .HasForeignKey("CityID");

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("UnconfirmedCityMembers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.UserPlastDegree", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithMany("UserPlastDegrees")
                        .HasForeignKey("UserId");

                    b.HasOne("EPlast.DataAccess.Entities.UserPlastDegreeType", "UserPlastDegreeType")
                        .WithMany("UserPlastDegrees")
                        .HasForeignKey("UserPlastDegreeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EPlast.DataAccess.Entities.UserProfile", b =>
                {
                    b.HasOne("EPlast.DataAccess.Entities.Education", "Education")
                        .WithMany("UsersProfiles")
                        .HasForeignKey("EducationID");

                    b.HasOne("EPlast.DataAccess.Entities.Gender", "Gender")
                        .WithMany("UserProfiles")
                        .HasForeignKey("GenderID");

                    b.HasOne("EPlast.DataAccess.Entities.Nationality", "Nationality")
                        .WithMany("UserProfiles")
                        .HasForeignKey("NationalityID");

                    b.HasOne("EPlast.DataAccess.Entities.Religion", "Religion")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ReligionID");

                    b.HasOne("EPlast.DataAccess.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("EPlast.DataAccess.Entities.UserProfile", "UserID");

                    b.HasOne("EPlast.DataAccess.Entities.Work", "Work")
                        .WithMany("UserProfiles")
                        .HasForeignKey("WorkID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
